apply plugin: "java-library"
apply plugin: "groovy"
apply plugin: "maven-publish"
apply plugin: "signing"

dependencies {

    api project(":model")

    api "org.apache.groovy:groovy-all:$groovyVersion"
    api "org.craftercms:groovy-sandbox:$groovySandboxVersion"

    // SLF4J JUL provider
    api "org.slf4j:slf4j-jdk14:$slf4jVersion"

    api "io.undertow:undertow-core:$undertowVersion"
    api "io.undertow:undertow-websockets-jsr:$undertowVersion"
    api ("org.jboss.resteasy:resteasy-undertow:$resteasyVersion") {
        exclude group: "jakarta.servlet",  module: "undertow-servlet-jakarta"
    }
    api "org.jboss.resteasy:resteasy-client:$resteasyVersion"
    api "org.jboss.resteasy:resteasy-jackson2-provider:$resteasyVersion"
    api "org.jboss.resteasy:resteasy-multipart-provider:$resteasyVersion"
    api "org.jboss.resteasy:resteasy-validator-provider:$resteasyVersion"

    api "org.keycloak:keycloak-client-registration-api:$keycloakVersion"
    // This is the generic keycloak adapter that isn't kept up to date - deprecated possibly?
    // They now only develop keycloak-jboss-adapter-core which is wildfly specific and would need some work to integrate
    api "org.keycloak:keycloak-adapter-core:$keycloakVersion"
    api "org.keycloak:keycloak-policy-enforcer:$keycloakVersion"
    api "org.keycloak:keycloak-admin-client:$keycloakVersion"

    api "org.postgresql:postgresql:$postgresJdbcVersion"
    api "org.flywaydb:flyway-core:$flywaydbVersion"
    implementation "org.flywaydb:flyway-database-postgresql:$flywaydbVersion"
    api "org.hibernate.orm:hibernate-core:$hibernateVersion"
    api "org.hibernate.orm:hibernate-hikaricp:$hibernateVersion"
    api "org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion"
    api "com.zaxxer:HikariCP:$hikaricpVersion"

    api "jakarta.el:jakarta.el-api:$javaxELAPIVersion"
    api "org.glassfish:jakarta.el:$javaxELVersion"

    api "org.apache.camel:camel-core:$camelVersion"
    api "org.apache.camel:camel-jackson:$camelVersion"
    api "org.apache.camel:camel-snmp:$camelVersion"
    api "org.apache.camel:camel-health:$camelVersion"
    api "org.apache.camel:camel-management:$camelVersion"
    api "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
}

base {
    archivesName = "openremote-${project.name}"
}

javadoc {
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Container'
                description = 'Application container for running; add maven {url "https://repo.osgeo.org/repository/release/"} and maven {url "https://pkgs.dev.azure.com/OpenRemote/OpenRemote/_packaging/OpenRemote/maven/v1"} to resolve all dependencies'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username = findProperty("publishUsername")
                    password = findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}
