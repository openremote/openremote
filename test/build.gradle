plugins {
    id 'com.adarshr.test-logger' version '3.1.0'
}

apply plugin: "java-library"
apply plugin: "groovy"
apply plugin: "maven-publish"
apply plugin: "signing"

dependencies {

    testImplementation project(":setup").sourceSets.integration.output
    api project(":manager")

    implementation "org.apache.groovy:groovy-all:$groovyVersion"
    implementation "org.apache.groovy:groovy-test:$groovyVersion"
    api platform("org.spockframework:spock-bom:$spockVersion")
    api 'org.spockframework:spock-core'

    // optional dependencies for using Spock
    testRuntimeOnly "net.bytebuddy:byte-buddy:$byteBuddyVersion" // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly "org.objenesis:objenesis:$objenesisVersion" // allows mocking of classes without default constructor (together with ByteBuddy or CGLIB)

    testImplementation("com.github.calimero:calimero-server:$calimeroVersion") {
        // Has a dependency on the SLF4J simple provider
        exclude group: "org.slf4j"
    }

    testImplementation "com.google.firebase:firebase-admin:$firebaseAdminVersion"
    testImplementation "org.shredzone.commons:commons-suncalc:$suncalcVersion"
    testImplementation "com.icegreen:greenmail:$greenmailVersion"

    testImplementation "net.solarnetwork.common:nifty-modbus-tcp:$niftyModbusVersion"
    testImplementation "net.solarnetwork.common:nifty-modbus-rtu-jsc:$niftyModbusVersion"
    testImplementation "net.solarnetwork.common:nifty-modbus-api:$niftyModbusVersion"
    testImplementation "net.solarnetwork.common:nifty-modbus-core:$niftyModbusVersion"


}

tasks.withType(Test) {
    environment("OR_LOGGING_CONFIG_FILE", "logging-dev.properties")
}

test {}

javadoc {
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Test Fixtures'
                description = 'Provides test fixtures for writing backend integration tests; add maven {url "https://repo.osgeo.org/repository/release/"} and maven {url "https://pkgs.dev.azure.com/OpenRemote/OpenRemote/_packaging/OpenRemote/maven/v1"} to resolve all dependencies'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username = findProperty("publishUsername")
                    password = findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}
