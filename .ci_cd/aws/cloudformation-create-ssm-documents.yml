# ---------------------------------------------------------------------------------------------------------------------
#
# CloudFormation Template for creating SSM Documents for attaching/detaching the EBS data volume.
#
# ---------------------------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: 'SSM documents for attaching/detaching the EBS data volume'
Resources:
  SSMUmountVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: umount_volume
      Content:
        schemaVersion: '2.2'
        description: 'Script for umounting the EBS data volume'
        parameters:
          DeviceName:
            type: String
            description: '(Required) Device name where this volume is mounted on'
            default: ''
        mainSteps:
          - name: StopDocker
            action: aws:runShellScript
            inputs:
              runCommand:
                - systemctl stop docker.socket docker.service
          - name: RemoveFileSystemEntry
            action: aws:runShellScript
            inputs:
              runCommand: 
                - |
                  UUID=$(blkid -o value -s UUID {{ DeviceName }})
                  if [ -n "$UUID" ]; then
                    cp /etc/fstab /etc/fstab.orig
                    sed -i '/UUID='$UUID'/d' /etc/fstab
                  else
                    echo "Failed to remove /etc/fstab entry. UUID is not found"
                    exit 1
                  fi
          - name: UmountVolume
            action: aws:runShellScript
            inputs:
              runCommand:
                - |
                  MOUNT=$(findmnt -S {{ DeviceName }})
                  if [ -n "$MOUNT" ]; then
                    umount {{ DeviceName }}
                  else
                    echo "Device not mounted. Skipping step."
                  fi

  SSMDetachVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: detach_volume
      Content:
        schemaVersion: '0.3'
        description: 'Script for detaching the EBS data volume'
        parameters:
          VolumeId:
            type: String
            description: '(Required) VolumeId that needs to be detached'
            default: ''
        mainSteps:
          - name: GetVolumeDetails
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{ VolumeId }}'
            outputs:
              - Name: InstanceId
                Selector: '$.Volumes[0].Attachments[0].InstanceId'
                Type: String
              - Name: DeviceName
                Selector: '$.Volumes[0].Attachments[0].Device'
                Type: String
            nextStep: UmountVolume
          - name: UmountVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: SendCommand
              DocumentName: umount_volume
              Parameters: 
                DeviceName: 
                  - '{{ GetVolumeDetails.DeviceName }}'
              InstanceIds:
                - '{{ GetVolumeDetails.InstanceId }}'
            outputs:
              - Name: CommandId
                Selector: '$.Command.CommandId'
                Type: String
            nextStep: WaitForUmount
          - name: WaitForUmount
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: GetCommandInvocation
              CommandId: '{{ UmountVolume.CommandId }}'
              InstanceId: '{{ GetVolumeDetails.InstanceId }}'
              PropertySelector: '$.StatusDetails'
              DesiredValues:
                - Success
            nextStep: DetachVolume
          - name: DetachVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DetachVolume
              VolumeId: '{{ VolumeId }}'
            nextStep: WaitForVolumeDetachment
          - name: WaitForVolumeDetachment
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds: 
                - '{{ VolumeId }}'
              PropertySelector: '$.Volumes[0].State'
              DesiredValues:
                - available
  
  SSMMountVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: mount_volume
      Content:
        schemaVersion: '2.2'
        description: 'Script for mounting the EBS data volume'
        parameters:
          DeviceName:
            type: String
            description: '(Required) EBS Device name where this volume needs to be mounted'
            default: ''
        mainSteps:
          - name: MountVolume
            action: aws:runShellScript
            inputs:
              runCommand:
                - |
                  FILESYSTEM=$(blkid -o value -s TYPE {{ DeviceName }})
                  if [ -z "$FILESYSTEM" ]; then
                    mkfs -t xfs {{ DeviceName }}
                    mount {{ DeviceName }} /var/lib/docker/volumes
                  else
                    mount {{ DeviceName }} /var/lib/docker/volumes
                  fi
          - name: AddFileSystemEntry
            action: aws:runShellScript
            inputs:
              runCommand:
                - |
                  UUID=$(blkid -o value -s UUID {{ DeviceName }})
                  if [ -n "$UUID" ]; then
                    cp /etc/fstab /etc/fstab.orig
                    echo "UUID=$UUID /var/lib/docker/volumes xfs defaults,nofail 0 2" >> /etc/fstab
                  else
                    echo "Failed to add /etc/fstab entry. UUID is not found"
                    exit 1
                  fi
          - name: StartDocker
            action: aws:runShellScript
            inputs:
              runCommand:
                - systemctl start docker.socket docker.service

  SSMAttachVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: attach_volume
      Content:
        schemaVersion: '0.3'
        description: 'Script for attaching the EBS data volume'
        parameters:
          VolumeId:
            type: String
            description: '(Required) VolumeId that needs to be attached'
            default: ''
          InstanceId:
            type: String
            description: '(Required) InstanceId where the volume needs to be attached'
            default: ''
          DeviceName:
            type: String
            description: '(Required) Device name where this volume needs to be mounted on'
            default: ''
        mainSteps:
          - name: AttachVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: AttachVolume
              VolumeId: '{{ VolumeId }}'
              InstanceId: '{{ InstanceId }}'
              Device: '{{ DeviceName }}'
            nextStep: WaitForVolumeAttachment
          - name: WaitForVolumeAttachment
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{ VolumeId }}'
              PropertySelector: '$.Volumes[0].Attachments[0].State'
              DesiredValues:
                - attached
            nextStep: MountVolume
          - name: MountVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: SendCommand
              DocumentName: mount_volume
              Parameters:
                DeviceName:
                  - '{{ DeviceName }}'
              InstanceIds:
                - '{{ InstanceId }}'
            outputs:
              - Name: CommandId
                Selector: '$.Command.CommandId'
                Type: String
            nextStep: WaitForVolumeMounting
          - name: WaitForVolumeMounting
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: GetCommandInvocation
              CommandId: '{{ MountVolume.CommandId }}'
              InstanceId: '{{ InstanceId }}'
              PropertySelector: '$.StatusDetails'
              DesiredValues:
                - Success

  SSMReplaceSnapshotDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: replace_snapshot
      Content:
        schemaVersion: '0.3'
        description: 'Script for replacing EBS data volume with a new snapshot'
        parameters:
          VolumeId:
            type: String
            description: '(Required) VolumeId that needs to be replaced'
            default: ''
          SnapshotId:
            type: String
            description: '(Required) SnapshotId to specify the snapshot for the new volume'
            default: ''
        mainSteps:
          - name: GetVolumeDetails
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{ VolumeId }}'
            outputs:
              - Name: DeviceName
                Selector: '$.Volumes[0].Attachments[0].Device'
              - Name: InstanceId
                Selector: '$.Volumes[0].Attachments[0].InstanceId'
            nextStep: GetInstanceDetails
          - name: GetInstanceDetails
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeInstances
              InstanceIds:
                - '{{ GetVolumeDetails.InstanceId }}'
            outputs:
              - Name: AvailabilityZone
                Selector: '$.Reservations[0].Instances[0].Placement.AvailabilityZone'
                Type: String
              - Name: Host
                Selector: '$.Reservations[0].Instances[0].Tags[1].Value'
            nextStep: CreateVolume
          - name: CreateVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: CreateVolume
              AvailabilityZone: '{{ GetInstanceDetails.AvailabilityZone }}'
              SnapshotId: '{{ SnapshotId }}'
              TagSpecifications:
                - ResourceType: volume
                  Tags:
                    - Key: Name
                      Value: '{{ GetInstanceDetails.Host }}-data'
            outputs:
              - Name: VolumeId
                Selector: '$.VolumeId'
                Type: String
            nextStep: WaitForVolumeCreation
          - name: WaitForVolumeCreation
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{ CreateVolume.VolumeId }}'
              PropertySelector: '$.Volumes[0].State'
              DesiredValues:
                - available
            nextStep: DetachVolume
          - name: DetachVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: detach_volume
              Parameters:
                VolumeId: 
                  - '{{ VolumeId }}'
            outputs:
              - Name: AutomationId
                Selector: "$.AutomationExecutionId"
                Type: String
            nextStep: WaitForVolumeDetachment
          - name: WaitForVolumeDetachment
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: GetAutomationExecution
              AutomationExecutionId: '{{ DetachVolume.AutomationId }}'
              PropertySelector: '$.AutomationExecution.AutomationExecutionStatus'
              DesiredValues:
                - Success
            nextStep: AttachVolume
          - name: AttachVolume
            action: aws:executeAwsApi
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: attach_volume
              Parameters:
                DeviceName:
                  - '{{ GetVolumeDetails.DeviceName }}'
                VolumeId: 
                  - '{{ CreateVolume.VolumeId }}'
                InstanceId: 
                  - '{{ GetVolumeDetails.InstanceId }}'
            outputs:
              - Name: AutomationId
                Selector: '$.AutomationExecutionId'
                Type: String
            nextStep: WaitForVolumeAttachment
          - name: WaitForVolumeAttachment
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 60
            onFailure: Abort
            inputs:
              Service: ssm
              Api: GetAutomationExecution
              AutomationExecutionId: '{{ AttachVolume.AutomationId }}'
              PropertySelector: '$.AutomationExecution.AutomationExecutionStatus'
              DesiredValues:
                - Success