# ---------------------------------------------------------------------------------------------------------------------
# Create standard OpenRemote VPC with 3 public and 3 private subnets and configure IGW for public subnets
# optional SSH access security group and optional VPC peer accepter role or peering request.
# ---------------------------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates standard OR VPC, subnets, route tables and IGW; optionally create VPC Peering request or acceptor role'
Parameters:
  IPV4CIDR:
    Description: IPv4 CIDR for VPC
    Type: String
  VPCAcceptRole:
    Description: Create VPC Peering Accept Role
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  PeerVPCAccountId:
    Description: VPC Peering acceptor Account ID
    Type: String
  PeerVPCId:
    Description: VPC Peering acceptor ID
    Type: String
  PeerVpcCidr:
    Description: VPC Peering acceptor CIDR
    Type: String
  PeerRoleArn:
    Description: Role ARN of VPC Peering acceptor
    Type: String
  SSHSecurityGroup:
    Description: Create SSH Access security group
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

Conditions:
  CreateVPCAcceptRole: !Equals [!Ref VPCAcceptRole, "true"]
  CreateVPCPeerRequest: !Not [!Equals [!Ref PeerRoleArn, ""]]
  CreateSSHSecurityGroup: !Equals [!Ref SSHSecurityGroup, "true"]

Resources:
  ## VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref IPV4CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: or-vpc

  VpcCidrBlockIpv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref Vpc
      AmazonProvidedIpv6CidrBlock: true

  ## VPC Peering accept role
  VPCPeerRole:
    Type: AWS::IAM::Role
    Condition: CreateVPCAcceptRole
    Properties:
      RoleName: !Join [ "-", [ "or-vpc-peer", !Ref "AWS::Region" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Principal:
              AWS: "*"
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Condition:
              StringEquals:
                'aws:PrincipalOrgID': o-dhb7rpaban
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'ec2:AcceptVpcPeeringConnection'
                Resource:
                  'Fn::Sub': 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}'
              - Action: 'ec2:AcceptVpcPeeringConnection'
                Condition:
                  StringEquals:
                    'ec2:AccepterVpc':
                      'Fn::Sub': 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}'
                Effect: Allow
                Resource:
                  'Fn::Sub': >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc-peering-connection/*

  ## VPC Peering Request
  VpcPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: CreateVPCPeerRequest
    Properties:
      VpcId: !Ref Vpc
      PeerVpcId: !Ref PeerVPCId
      PeerOwnerId: !Ref PeerVPCAccountId
      PeerRoleArn: !Ref PeerRoleArn

  ## SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 0, !Cidr [!Ref IPV4CIDR, 6, 8]]
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 7, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: or-subnet-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 1, !Cidr [!Ref IPV4CIDR, 6, 8]]
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 7, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: or-subnet-public-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 5, !Cidr [!Ref IPV4CIDR, 7, 8]]
      Ipv6CidrBlock: !Select [6, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 8, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: or-subnet-public-3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 2, !Cidr [!Ref IPV4CIDR, 6, 8]]
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 7, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: or-subnet-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 3, !Cidr [!Ref IPV4CIDR, 6, 8]]
      Ipv6CidrBlock: !Select [4, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 7, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: or-subnet-private-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlockIpv6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 6, !Cidr [!Ref IPV4CIDR, 7, 8]]
      Ipv6CidrBlock: !Select [7, !Cidr [!Select [0, !GetAtt 'Vpc.Ipv6CidrBlocks'], 8, 64]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: or-subnet-private-3

  ## INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  ## PUBLIC ROUTING
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: or-routetable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRoute6:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  VpcPeerRoute:
    Type: AWS::EC2::Route
    Condition: CreateVPCPeerRequest
    DependsOn: VpcPeeringConnection
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PeerVpcCidr
      VpcPeeringConnectionId: !Ref VpcPeeringConnection

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  ## SSH Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSSHSecurityGroup
    Properties:
      GroupDescription: "SSH access whitelist"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: ssh-access
