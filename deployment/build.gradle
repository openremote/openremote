apply plugin: "java-library"

configurations {
    managerRuntime
}

dependencies {
    api project(":setup")
    managerRuntime project(':manager')
}

tasks.register('license') {
    doLast {
        def toConcatenate = files("${rootDir}/LICENSE.txt")
        def outputFileName = "${buildDir}/image/manager/app/LICENSE.txt"
        def output = new File(outputFileName)
        if (output.exists()) {
            output.delete()
        }
        output.getParentFile().mkdirs()
        output.createNewFile()
        output.write('') // truncate output if needed
        toConcatenate.each { f -> output << f.text }
    }
}

tasks.register('installDist', Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn(parent.getTasksByName('installDist', true).findAll {
        // Don't create circular dependency or depend on built in openremote submodule apps
        it.project != project && !it.project.path.startsWith(":openremote:ui:app")
    })

    into("$buildDir")

    from "Dockerfile"

    into("image") {
        from projectDir
        exclude "build.gradle", "Dockerfile", "build", "**/*.mbtiles", "src", "**/*.md", ".gitignore", "**/*.encrypted"
    }

    into("image/manager/extensions") {
        from configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.collect {it.file }
        // Don't include deps baked into the manager docker image
        exclude configurations.managerRuntime.resolvedConfiguration.resolvedArtifacts.collect {it.file.name }
        // Don't include any ui packaged JARs (used for dev purposes only)
        exclude { (it.file.path.contains(".gradle")  || it.file.path.contains(".m2")) && it.file.path.contains("io.openremote.ui") }
    }
}
