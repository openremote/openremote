import java.nio.file.Paths

apply plugin: "java-library"
apply plugin: "application"
apply plugin: "distribution"
apply plugin: "maven-publish"
apply plugin: "signing"

application {
    mainClass = "org.openremote.manager.Main"
}

dependencies {

    api project(":container")
    api project(":agent")
    api project(":model")

    implementation "org.xerial:sqlite-jdbc:$sqliteVersion"

    api "org.mnode.ical4j:ical4j:$ical4jVersion"

    implementation "org.geotools:gt-main:$geotoolsVersion"
    implementation "com.google.firebase:firebase-admin:$firebaseAdminVersion"
    implementation "org.eclipse.angus:angus-mail:$jakartaMailVersion"
    implementation "io.swagger.core.v3:swagger-jaxrs2-jakarta:$swaggerVersion"
    implementation "org.openjdk.nashorn:nashorn-core:$nashornVersion"
    implementation "org.apache.camel:camel-undertow:$camelVersion"

    // Indirect dep from org.apache.activemq:artemis-mqtt-protocol
    api ("io.netty:netty-codec-mqtt") {
        version {
            strictly "$nettyVersion"
        }
    }

    implementation("org.apache.activemq:artemis-mqtt-protocol:$activeMQVersion") {
        exclude group: "org.osgi"
        exclude group: "org.jboss.logmanager"
    }

    // Needed for reference in tests
    api("org.apache.activemq:artemis-server:$activeMQVersion") {
        exclude group: "org.osgi"
        exclude group: "org.jboss.logmanager"
    }

    implementation("org.quartz-scheduler:quartz:$quartzVersion") {
        exclude module: "c3p0"
        exclude module: "HikariCP-java7"
    }

    implementation "org.shredzone.commons:commons-suncalc:$suncalcVersion"
    implementation "io.prometheus:simpleclient_httpserver:$prometheusVersion"

    implementation "com.github.mwiede:jsch:$jSchVersion"
}

base {
    archivesName = "openremote-${project.name}"
}

configurations {
    runtime {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom implementation, runtimeOnly
    }
}

artifacts {
    runtime(jar)
}

afterEvaluate {
    // Change the working directory for the run task
    tasks.run.workingDir = rootProject.projectDir
}

tasks.withType(Sync).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Tar){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distributions {
    main {
        contents {
            from(project.projectDir) {
                include("*Dockerfile")
            }
            into ("web") {
                from("${rootDir}/LICENSE.txt")
            }
            into ("map") {
                from("${projectDir}/src/map")
            }
        }
    }
}

javadoc {
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Manager'
                description = 'Provides core container services and is the main component of the OpenRemote backend; add maven {url "https://repo.osgeo.org/repository/release/"} and maven {url "https://pkgs.dev.azure.com/OpenRemote/OpenRemote/_packaging/OpenRemote/maven/v1"} to resolve all dependencies'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username = findProperty("publishUsername")
                    password = findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

// Output version.properties file
tasks.register('setVersionProperties', WriteProperties) {
    destinationFile = Paths.get(projectDir.path, "src", "main", "resources", "version.properties").toFile()
    property 'version', project.version
}

publish.mustRunAfter(setVersionProperties)
publish.dependsOn(setVersionProperties)
processResources.dependsOn(setVersionProperties)
sourcesJar.dependsOn(setVersionProperties)
