apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: "signing"

sourceSets.main.resources.srcDirs += layout.buildDirectory.dir('classes/main')

configurations {
    sources
}

dependencies {
    sources "org.webjars:swagger-ui:$swaggeruiVersion"
}

base {
    archivesName = "openremote-${project.name}"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote.ui"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Swagger UI'
                description = 'Provides a Swagger UI configured for use with OpenRemote'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username findProperty("publishUsername")
                    password findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

tasks.register('generateSources', Copy) {
    // Copy Swagger UI resources from the WebJars dependency
    from zipTree(configurations.sources.singleFile).matching {
        include "META-INF/resources/webjars/swagger-ui/$swaggeruiVersion/*"
        exclude('**/favicon*.png')
        exclude('**/index.html')
        exclude('**/swagger-initializer.js')
    }
    // Flatten the hierarchy by setting the path of all files to their respective basename
    eachFile {
        path = name
    }
    // Flattening the hierarchy leaves empty directories, do not copy those
    includeEmptyDirs = false
    into layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")

    // Copy OpenRemote customizations
    from fileTree(projectDir) {
        exclude 'build.gradle'
        exclude 'build/**'
    }
    into layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
}

tasks.register('installDist', Copy) {
    dependsOn generateSources
    mustRunAfter resolveTask(":manager:installDist")
    from layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
    into project(':manager').layout.buildDirectory.dir("install/manager/web/${project.name}")
}

jar.dependsOn(generateSources)
processResources.dependsOn(generateSources)
sourcesJar.dependsOn(generateSources)
