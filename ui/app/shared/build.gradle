apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: "signing"

sourceSets.main.resources.srcDirs += layout.buildDirectory.dir('classes/main')

base {
    archivesName = "openremote-${project.name}"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote.ui"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Shared UI Files'
                description = 'Provides the files shared between OpenRemote UIs'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username = findProperty("publishUsername")
                    password = findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

def cacheDir = layout.projectDirectory.dir("cache").asFile
def openMapTilesFontsVersion = "v2.0"
def openMapTilesFontsZip = new File(cacheDir, "openmaptiles-fonts-${openMapTilesFontsVersion}.zip")

tasks.register('downloadOpenMapTilesFontsZip') {
    // Mark the downloaded file as the output (for Gradle caching)
    outputs.file openMapTilesFontsZip

    // Mark version and package name as inputs (if they change, redownload)
    inputs.property("openMapTilesFontsVersion", openMapTilesFontsVersion)

    doLast {
        if (!openMapTilesFontsZip.exists()) {
            cacheDir.mkdirs()
            logger.lifecycle("Downloading OpenMapTiles Fonts ${openMapTilesFontsVersion} ...")
            def url = new URL("https://github.com/openmaptiles/fonts/releases/download/${openMapTilesFontsVersion}/${openMapTilesFontsVersion}.zip")
            url.openStream().withCloseable { is ->
                openMapTilesFontsZip.withOutputStream { os ->
                    is.transferTo(os)
                }
            }
        } else {
            logger.lifecycle("Using cached ${openMapTilesFontsZip.name}")
        }
    }
}

tasks.register('extractOpenMapTilesFontsZip', Copy) {
    dependsOn downloadOpenMapTilesFontsZip
    from(zipTree(openMapTilesFontsZip)) {
        include "Open Sans Bold/**", "Open Sans Italic/**", "Open Sans Regular/**", "Open Sans SemiBold/**"
    }
    into layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}/fonts").get().asFile
}

tasks.register('generateSources', Copy) {
    dependsOn extractOpenMapTilesFontsZip
    from fileTree(projectDir) {
        exclude 'build.gradle'
        exclude 'build/**'
    }
    into layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
}

tasks.register('installDist', Copy) {
    dependsOn generateSources
    mustRunAfter resolveTask(":manager:installDist")
    from layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
    into project(':manager').layout.buildDirectory.dir("install/manager/web/${project.name}")
}

jar.dependsOn(generateSources)
processResources.dependsOn(generateSources)
sourcesJar.dependsOn(generateSources)
