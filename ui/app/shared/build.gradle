import javax.annotation.processing.Processor
import javax.tools.ToolProvider

apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: "signing"

sourceSets.main.resources.srcDirs += layout.buildDirectory.dir('classes/main')

base {
    archivesName = "openremote-${project.name}"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "io.openremote.ui"
            artifactId = "openremote-${project.name}"
            from components.java
            pom {
                name = 'OpenRemote Shared UI Files'
                description = 'Provides the files shared between OpenRemote UIs'
                url = 'https://github.com/openremote/openremote'
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Developers'
                        email = 'developers@openremote.io'
                        organization = 'OpenRemote'
                        organizationUrl = 'https://openremote.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/openremote/openremote.git'
                    developerConnection = 'scm:git:ssh://github.com:openremote/openremote.git'
                    url = 'https://github.com/openremote/openremote/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            if (!version.endsWith('-LOCAL')) {
                credentials {
                    username = findProperty("publishUsername")
                    password = findProperty("publishPassword")
                }
            }
            url = version.endsWith('-LOCAL') ? layout.buildDirectory.dir('repo') : version.endsWith('-SNAPSHOT') ? findProperty("snapshotsRepoUrl") : findProperty("releasesRepoUrl")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

tasks.register('generateSources', Copy) {
    from fileTree(projectDir) {
        exclude 'build.gradle'
        exclude 'build/**'
    }
    into layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
}

tasks.register('installDist', Copy) {
    dependsOn generateSources
    mustRunAfter resolveTask(":manager:installDist")
    from layout.buildDirectory.dir("classes/main/org/openremote/web/${project.name}")
    into project(':manager').layout.buildDirectory.dir("install/manager/web/${project.name}")
}

tasks.register('processTranslations') {
    dependsOn(":model:classes")
    doLast {
        def compiler = ToolProvider.systemJavaCompiler
        def fileManager = compiler.getStandardFileManager(null, null, null)

        // Sources to process (model sources)
        def modelSources = project(":model").fileTree("src/main/java") {
            include "**/*.java"
        }.files
        def units = fileManager.getJavaFileObjectsFromFiles(modelSources)

        // Include compiled model classes + all dependencies
        def classPaths = project(":model").sourceSets.main.compileClasspath.asPath as String
        def processorPath = project(":model").sourceSets.main.output.classesDirs.asPath as String

        // Pass classpath to compiler
        def options = List.of(
            "-classpath", classPaths,
            "-processorpath", processorPath + File.pathSeparator + classPaths,
            "-processor", "org.openremote.model.util.I18nAnnotationProcessor",
            "-proc:only", // only run processor, donâ€™t emit .class files
            "-Ashared=${project.getProjectDir()}".toString()
        )

        // Run javac with processor
        def task = compiler.getTask(null, fileManager, null, options, null, units)
        def success = task.call()
        println "Processor success: $success"
    }
}

jar.dependsOn(generateSources)
processResources.dependsOn(generateSources)
sourcesJar.dependsOn(generateSources)
