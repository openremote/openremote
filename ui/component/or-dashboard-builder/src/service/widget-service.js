var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { widgetTypes } from "../index";
import { Util } from "@openremote/core";
export class WidgetService {
    static getManifest(widgetTypeId) {
        const manifest = widgetTypes.get(widgetTypeId);
        if (!manifest) {
            throw new Error("Widget manifest could not be found during widget creation.");
        }
        return manifest;
    }
    static placeNew(widgetTypeId, x, y) {
        return __awaiter(this, void 0, void 0, function* () {
            const randomId = (Math.random() + 1).toString(36).substring(2);
            const manifest = this.getManifest(widgetTypeId);
            const widget = {
                id: randomId,
                displayName: manifest.displayName,
                gridItem: {
                    id: randomId,
                    x: x,
                    y: y,
                    w: 2,
                    h: 2,
                    minW: manifest.minColumnWidth,
                    minH: manifest.minColumnHeight,
                    minPixelW: manifest.minPixelWidth,
                    minPixelH: manifest.minPixelHeight,
                    noResize: false,
                    noMove: false,
                    locked: false,
                }, // Left empty until it is generated by or-dashboard-preview
                widgetConfig: manifest.getDefaultConfig(),
                widgetTypeId: widgetTypeId
            };
            return widget;
        });
    }
    // Method used to correct the OrWidgetConfig specification
    // So, if certain fields are removed or invalid, it will be corrected by merging the object with the default OrWidgetConfig.
    static correctToConfigSpec(manifest, widgetConfig) {
        return Util.mergeObjects(manifest.getDefaultConfig(), widgetConfig, false);
    }
}
//# sourceMappingURL=widget-service.js.map