import { LitElement, PropertyValues, TemplateResult } from "lit";
import { RulesetLang, RulesetUnion, RealmRuleset } from "@openremote/model";
import "@openremote/or-translate";
import "@openremote/or-mwc-components/or-mwc-input";
import { RulesConfig, RulesetNode } from "./index";
import "@openremote/or-mwc-components/or-mwc-menu";
declare const OrRuleList_base: (new (...args: any[]) => {
    _i18nextJustInitialized: boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    shouldUpdate(changedProps: Map<PropertyKey, unknown> | import("lit").PropertyValueMap<any>): any;
    initCallback: (options: import("i18next").InitOptions) => void;
    langChangedCallback: () => void;
    readonly isConnected: boolean;
}) & typeof LitElement;
export declare class OrRuleList extends OrRuleList_base {
    static DEFAULT_ALLOWED_LANGUAGES: RulesetLang[];
    config?: RulesConfig;
    readonly: boolean;
    disabled: boolean;
    multiSelect: boolean;
    selectedIds?: number[];
    sortBy?: string;
    language?: RulesetLang;
    protected _nodes?: RulesetNode[];
    protected _showLoading: boolean;
    protected _globalRulesets: boolean;
    protected _selectedNodes: RulesetNode[];
    protected _rulesetPromises: Map<string, Promise<any[]>>;
    protected _ready: boolean;
    static get styles(): import("lit").CSSResult[];
    refresh(): Promise<void>;
    protected get _allowedLanguages(): RulesetLang[] | undefined;
    protected _updateLanguage(): void;
    protected _onReady(): void;
    protected firstUpdated(_changedProperties: PropertyValues): void;
    shouldUpdate(_changedProperties: PropertyValues): boolean;
    protected render(): TemplateResult<1>;
    protected _isReadonly(): boolean;
    protected _nodeTemplate(node: RulesetNode): TemplateResult | string;
    protected static _getNodeStatusClasses(ruleset: RulesetUnion): string;
    protected _updateSelectedNodes(): void;
    protected static _updateSort(nodes: RulesetNode[], sortFunction: (a: RulesetNode, b: RulesetNode) => number): void;
    protected _onNodeClicked(evt: MouseEvent, node: RulesetNode): void;
    protected _onCopyClicked(): void;
    protected _onAddClicked(lang: RulesetLang): void;
    protected _onDeleteClicked(): void;
    protected _doDelete(): void;
    protected _onSearchClicked(): void;
    protected _onSortClicked(sortBy: string): void;
    protected _getSortFunction(): (a: RulesetNode, b: RulesetNode) => number;
    protected _getRealm(): string | undefined;
    protected _loadRulesets(): Promise<void>;
    protected _buildTreeNodes(rulesets: RealmRuleset[], sortFunction: (a: RulesetNode, b: RulesetNode) => number): void;
}
export {};
